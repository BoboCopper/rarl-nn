% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 24-May-2017 14:35:24
%
% This script assumes these variables are defined:
%
%   X - input data.
%   Y - target data.

% ------------------------------------------------------------------
% Defining dataset
x_1 = single( [0 ; 0] );
x_2 = single( [0 ; 1] );
x_3 = single( [1 ; 0] );
x_4 = single( [1 ; 1] );
% X = [ x_1 x_2 x_3 x_4 ];

y_1 = single(0);
y_2 = single(1);
y_3 = single(1);
y_4 = single(0);

% Y = [ y_1 y_2 y_3 y_4 ];
% ------------------------------------------------------------------


rng(0);

x = X;
t = Y;

% Choose a Training Function
% ------------------------------------------------------------------
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Scaled conjugate gradient backpropagation.
% ------------------------------------------------------------------

% Create a Fitting Network
% ------------------------------------------------------------------
% per default there will be size(hiddenLayers) + 1 layers
% change 'fitnet' to another neural net architecture if needed
hiddenLayers = [2 8]; 
net = fitnet(hiddenLayers,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample

% we only use this for RL training, we don't have a testRatio/valRatio
net.divideParam.trainRatio = 95/100;
net.divideParam.valRatio = 2.5/100;
net.divideParam.testRatio = 2.5/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% We only have want to learn one-by-one, because we don't have batches in RL
net.trainParam.epochs = 1000;

% Don't open unneeded GUIs
%net.trainParam.showWindow=0;
% ------------------------------------------------------------------


% Choose Plot Functions
% ------------------------------------------------------------------
% For a list of all plot functions type: help nnplot
% net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
%    'plotregression', 'plotfit'};
% ------------------------------------------------------------------

% Train the Network
% ------------------------------------------------------------------
[net,tr] = train(net,x,t);
% ------------------------------------------------------------------

% Test the Network
% ------------------------------------------------------------------
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
% ------------------------------------------------------------------

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)
% ------------------------------------------------------------------

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Deployment
% ------------------------------------------------------------------
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (true)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'sinsincosnet');
    y = sinsincosnet(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
% ------------------------------------------------------------------

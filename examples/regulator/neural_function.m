function [Y,Xf,Af] = neural_function(X,Xi,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Jul-2017 17:16:24.
% 
% [Y,Xf,Af] = neural_function(X,Xi,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
%   Xi = 1x4 cell 1, initial 4 input delay states.
%   Each Xi{1,ts} = 3xQ matrix, initial states for input #1.
% 
%   Ai = 3x0 cell 3, initial 4 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 5xQ matrix, initial states for layer #2.
%   Each Ai{3,ts} = 1xQ matrix, initial states for layer #3.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
%   Xf = 1x4 cell 1, final 4 input delay states.
%   Each Xf{1,ts} = 3xQ matrix, final states for input #1.
% 
%   Af = 3x0 cell 3, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 5xQ matrix, final states for layer #2.
%   Each Af{3ts} = 1xQ matrix, final states for layer #3.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-26.324;-0.73774;-0.305];
x1_step1.gain = [0.0361814136078297;1.09031041137412;2.95967443581206];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.69839393030520813;2.458552159104102;-0.17924265023148581;-0.21128568249942151;-0.63283940269312811;0.55898658312005745;-0.15946660946620689;-2.1727265071947519;0.547072969678988;-1.7984828766354077];
IW1_1 = [-1.4038141742016719 -2.0161163851298558 1.2690926070525648 -1.8911812320392745 -2.1717901260667687 0.76711994785464399 -2.3737977750600536 -2.1785714934243234 1.4937954578816492 -2.1638614046564775 -1.0718981582042262 0.68673867943948308;-6.1796999078173496 -1.7812080153703969 1.6268571942747707 -5.8799492045112673 -1.544926768969461 2.3425209177383772 -5.8487453410815178 -1.7501439718853524 1.1272482335272154 -6.4059656674825884 -1.6607404907239633 1.0485505858182345;-3.7301418094112266 -1.9425628201101266 -0.33847513696528442 -2.9519506141050718 -1.7631289268625969 -0.19288096474438365 -2.5826441282453709 -1.4930315584673919 1.5012502074923781 -1.6875700969879066 -0.12449863814092961 2.7653769390443652;-0.18164023482649022 2.9751427306508371 0.037336149360833452 -0.75375396254686644 -0.013844322506576415 -0.015713242457488754 -0.52395030210047377 -1.6825542685283017 -0.061067470084946153 1.3860982288533246 -1.3012201872538582 -0.1193201462665056;0.84172753206186512 0.69011945371427874 -0.24126433640325767 0.83239499954028862 -0.20891512449092312 0.26245730808796996 0.66655502111553355 0.26804169612917178 -0.21339943024613908 -1.3722481556303536 0.38767723723347952 -0.45837532417737892;-0.43274280356362699 2.4713425113166965 0.48865880542479878 -0.685203549178246 0.6041998244754353 -0.20600183397700034 -1.131477250811157 -1.2084034516145739 -0.35310929943020303 2.1435824023827741 -1.6970242499214012 0.32909248004349384;1.2432318541313423 3.6570892325500695 -0.48655394231326971 -1.2911949312269413 -0.14121538897836855 0.16433776193298802 -0.75303418334633054 -1.1268791408673513 0.42963998136191439 0.9044529810158114 -2.5236176463287707 -0.1834209372772522;-0.33737065930570431 0.050152072883562118 -0.079841440566040131 0.42948027566321034 -0.42214143156298262 0.88925532521830108 -0.64426163966879979 0.57400468601701837 -0.28084168858190345 0.17487630867425016 0.05042297542418895 -0.6324106081291192;-1.2924484042350453 -0.85531775959688694 -0.44383188449925237 0.08318745161677614 -0.48847875733098511 0.070801278944678844 -0.21269189602903288 0.33229235955716308 0.41629108430350015 1.5192113721430556 0.8446341524391604 -0.29756864417638257;0.38218540950076035 1.1677108840798551 -1.6783265770778608 0.17971603203434139 0.99040833901978897 -1.1874024791659827 0.55367771929323906 0.12925019026369317 0.35159913222665834 1.0146179644487159 1.2380267889333942 0.82141650061289795];

% Layer 2
b2 = [3.5657646603405442;0.95868301356543173;0.06762765850130921;-1.4327601591715828;1.7669635948140521];
LW2_1 = [-0.87346951881234458 0.19776031058789822 -0.43950360282319689 -0.15906698004459682 2.3446801092377227 -1.0629139667784395 0.50426592745780763 -1.1257315161304526 -1.5276680332222541 -0.81309967483139867;0.89365798376231298 -5.8424970165249484 1.7982486346574773 -0.19435866433905846 2.2110177901465464 1.0136796412107407 -1.3220776256859794 -2.9861565841334059 0.39441857856232659 -0.14835417102011494;-0.052622666751369729 0.012737673896254515 -0.027510243995101196 -4.9109331479597218 -0.080328892305908062 -2.8305018577778895 -4.2467514886934588 1.6832765354601105 2.5136318272130911 0.0048434687812306445;-0.67221360154415577 5.9653200421095649 -1.8160507873350613 0.33588227844309354 -0.81664291704462777 -1.1782337197567034 1.7634699834223753 1.7359916160580788 -1.0117199148922311 -0.35351103338512763;0.60267386901322861 -0.14302679809536048 0.33498734843582689 1.038054752656008 0.76853750925047826 0.29543527637367267 1.15525965737758 0.14839826764518682 -1.2095032851497143 -0.05416010746773596];

% Layer 3
b3 = -0.74158195913939007;
LW3_2 = [0.85240114764248653 -0.64849781706971554 -6.7977926753673756 -0.64211488639021896 -0.60645695168948921];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0202829412351036;
y1_step1.xoffset = -56.2361142857143;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
  Q = size(Xi{1},2);
else
  Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,5);
for ts=1:4
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+3,5)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4]-1,5)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 4);
xits = finalxts(finalxts<=4);
xts = finalxts(finalxts>4)-4;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
